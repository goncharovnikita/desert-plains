name: Release

on:
  # Trigger the workflow on the new 'v*' tag created
  push:
    tags:
      - "release/v*"

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2.4.0

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF_NAME/release\/v}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        ghc:
          - "8.10.7"

    steps:
      - name: Check out code
        uses: actions/checkout@v2.4.0

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF_NAME/release\/v}

      - name: Setup Haskell
        uses: haskell/actions/setup@v1
        with:
          ghc-version: "8.10.7"
          cabal-version: "3.6.2.0"
          enable-stack: true
          stack-no-global: true
          stack-version: "2.7.3"
          stack-setup-ghc: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.stack
          key: ${{ runner.os }}-${{ hashFiles('./stack.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Build binary
        run: make install

      - if: matrix.os == 'windows-latest'
        id: set_ext
        name: Set extension to .exe on Windows
        run: echo "::set-output name=EXT::.exe"

      - name: Set binary path name
        id: set_binary_name
        run: echo "::set-output name=BINARY_PATH::$(stack path --local-bin)/desert-plains-exe${{ steps.set_ext.outputs.EXT }}"

      - name: Compress binary
        uses: svenstaro/upx-action@2.0.1
        with:
          file: ${{ steps.set_binary_name.outputs.BINARY_PATH }}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v2.1.0
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url/release_url.txt)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ steps.set_binary_name.outputs.BINARY_PATH }}
          asset_name: desert-plains-${{ steps.get_version.outputs.VERSION }}-${{ runner.os }}${{ env.EXT }}
          asset_content_type: application/octet-stream
